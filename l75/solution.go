package l75

/*
## 题目描述

给定一个包含红色、白色和蓝色、共 n 个元素的数组 nums ，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。

我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。

必须在不使用库内置的 sort 函数的情况下解决这个问题。

提示：

n == nums.length
1 <= n <= 300
nums[i] 为 0、1 或 2


进阶：

你能想出一个仅使用常数空间的一趟扫描算法吗？

## 解题思路

- 程序运行结束后，数组中分为三个区域，0 1 2 区域
- 使用两个指针 p_zero 和 p_two, 分别表示 0 区域的尾部后一位和 2 区域的头部前一位
- 遍历一遍数组，遇到数字 0 放到 0 区域尾部, 遇到数字2放到 2 区域头部，遍历完成后，数组中的数字也自动分好区了
- 注意:
	- 2 区域中的数字不需要再移动了 ，因此我们遍历时，遍历到2区域的头部就跳出循环。
	- 循环跳出的条件是 i <= p_two， 要遍历数组中每一个数字，因此要遍历到 p_two

## 复杂度分析

N == len(nums)
时间复杂度: O(N)
空间复杂度: O(1)
*/

func sortColors(nums []int) {
	var (
		p_zero = 0
		i      = 0
		p_two  = len(nums) - 1
	)
	for i <= p_two {
		if nums[i] == 0 {
			swap(nums, i, p_zero)
			p_zero++
			// 当前数字被交换到后面了，当前数字一定是0,因此 i 可以往后移动一位
			i++
		} else if nums[i] == 1 {
			// 当前数字是1的时候，不交换
			i++
		} else {
			// 当前数字是2的时候，将当前数字交换到数组尾部
			swap(nums, i, p_two)
			p_two--
		}
	}
}

func swap(nums []int, x, y int) {
	tmp := nums[x]
	nums[x] = nums[y]
	nums[y] = tmp
}
